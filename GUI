import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import static javax.swing.JFrame.setDefaultLookAndFeelDecorated;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

/**
 * @author Stephanie Smithson
 
 * This class will create the Graphical User Interface for my program
 */

public class GUI extends JFrame {
    
    /**
     * This will run the entire program
     * 
     * @param args Arguments -null-
     */
    public static void main(String[] args) {
        GUI gui = new GUI();
        gui.run();
    }
    
    
    /**
     * This is the first JFrame that gives the user options for the program
     * 
     * They can either register, login, or cancel out of the program
     * 
     * This method is the base and links to all of the other methods in the program
     */
    public void run() {
        setSize(220, 200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setDefaultLookAndFeelDecorated(true);

        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        setTitle("Login");
        
        JButton one = new JButton("Login");
        JButton two = new JButton("New User");
        JButton three = new JButton("Quit");
        JButton test = new JButton("Test Transfer");
        
        JButton space = new JButton("space");
        //space.setVisible(false);
        space.setEnabled(false);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        add(one, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridy = 1;
        add(two, c);
        
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridy = 2;
        add(three, c);
       
        one.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                goToLogin();
            }
        });
        
        two.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                newUser();                   
            }
        });

        three.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                cancel();
            }
        });
        
        setVisible(true);
    }
    
    /**
     * This method will open the JFrame for the user to enter their username and password
     */
    public void goToLogin() {
        getContentPane().removeAll();
        getContentPane().repaint();
        
        setTitle("Login");
        
        GridBagConstraints c = new GridBagConstraints();
        
        JLabel userField = new JLabel("Username: ");
        final JTextField username = new JTextField(10);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 1;
        c.gridy = 1;
        add(userField, c);
        c.gridx = 2;
        add(username, c);

        userField.requestFocusInWindow();
        
        JLabel passField = new JLabel("Password: ");
        final JPasswordField password = new JPasswordField(10);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 1;
        c.gridy = 2;
        add(passField, c);
        c.gridx = 2;
        add(password, c);
        
        JButton back = new JButton("Back");
        c.anchor = GridBagConstraints.NORTHWEST;
        c.gridx = 0;
        c.gridy = 0;
        add(back, c);
        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                getContentPane().removeAll();
                getContentPane().repaint();
                run();
            }
        });
        
        final JButton confirm = new JButton("Ok");
        
        getRootPane().setDefaultButton(confirm);
        
        confirm.addActionListener(new ActionListener() {
            fileManager fm = new fileManager();
            
            public void actionPerformed(ActionEvent e) {
                if(username.getText().equals("") || username.getText().length() > 12) {
                    JOptionPane.showMessageDialog(null, "Username must be 6-12 characters.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(username.getText().contains(" ")) {
                    JOptionPane.showMessageDialog(null, "Username cannot contain spaces.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(password.getText().equals("") || password.getText().length() > 12) {
                    JOptionPane.showMessageDialog(null, "Password must be 6-12 characters.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else {
                    User u = new User(username.getText(), password.getText());
                    try {
                        if(fm.containsUser(u.getUsername(), u.getPassword())) {
                            setVisible(false);
                            BankAccount ba = fm.getAccount(u);
                            System.out.println("Reached!");
                            enterAccount(ba);
                        }
                        else JOptionPane.showMessageDialog(null, "Username/Password not recognized.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        
        /**
         * Pressing enter automatically triggers the confirm JButton
         */
        addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    confirm.doClick();
                }
            }
        });

        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.CENTER;
        c.gridx = 2;
        c.gridy = 5;
        add(confirm, c);

        setSize(280, 150);
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    /**
     * This method will create the JFrame for the New User
     * 
     * They will enter their email, username, password
     */
    public void newUser() {
        getContentPane().removeAll();
        getContentPane().repaint();
        
        //File bankFile = new File("/bankFile.txt");
        
        //final Bank bank = new Bank();
        //final User[] currentUsers;
        
        
        setTitle("New User");
        
        GridBagConstraints c = new GridBagConstraints();
                
        JButton back = new JButton("Back");
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.NONE;
        c.gridx = 0;
        c.gridy = 1;
        add(back, c);
        back.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                getContentPane().removeAll();
                getContentPane().repaint();
                run();
            }
        });
        
        JLabel emailField = new JLabel("Email:      ");
        JTextField email = new JTextField(10);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.anchor = GridBagConstraints.CENTER;
        c.gridx = 1;
        c.gridy = 2;
        add(emailField, c);
        c.gridx = 2;
        add(email, c);
        
        JLabel userField = new JLabel("Username:");
        final JTextField username = new JTextField(10);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 1;
        c.gridy = 3;
        add(userField, c);
        c.gridx = 2;
        add(username, c);
        
        userField.requestFocusInWindow();

        JLabel passField = new JLabel("Password:");
        final JPasswordField password = new JPasswordField(10);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 1;
        c.gridy = 4;
        add(passField, c);
        c.gridx = 2;
        add(password, c);
        
        JLabel confirmPassField = new JLabel("Confirm password:   ");
        final JPasswordField confirmPassword = new JPasswordField(10);
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 1;
        c.gridy = 5;
        add(confirmPassField, c);
        c.gridx = 2;
        add(confirmPassword, c);
        
        final JButton confirm = new JButton("Ok");
        
        getRootPane().setDefaultButton(confirm);
        
        confirm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fileManager fm = new fileManager();
                
                if(username.getText().equals("") || username.getText().length() < 6 || username.getText().length() > 12) {
                    JOptionPane.showMessageDialog(null, "Username must be 6-12 characters.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(username.getText().contains(" ")) {
                    JOptionPane.showMessageDialog(null, "Username cannot contain spaces.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(password.getText().contains(" ") || confirmPassword.getText().contains(" ")) { 
                    JOptionPane.showMessageDialog(null, "Password cannot contain spaces.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(password.getText().equals("") || password.getText().length() < 6 || password.getText().length() > 12) {
                    JOptionPane.showMessageDialog(null, "Password must be 6-12 characters.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(!password.getText().equals(confirmPassword.getText())) {
                    JOptionPane.showMessageDialog(null, "Passwords do not match.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else try {
                    if(fm.containsUser(username.getText(), password.getText())) {
                        User u = new User(username.getText(), password.getText());
                        BankAccount ba = fm.getAccount(u);
                        setVisible(false);
                        enterAccount(ba);
                    }
                    else if(fm.containsUsername(username.getText())) {
                        JOptionPane.showMessageDialog(null, "Username already in use.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                    }
                    else {
                        User u = new User(username.getText(), password.getText());
                        fm.add(username.getText(), password.getText());
                        createAccount(u);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }); 
        c.anchor = GridBagConstraints.CENTER;
        c.fill = GridBagConstraints.NONE;
        c.gridx = 2;
        c.gridy = 6;
        add(confirm, c); 
        
        setSize(330,190);
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    public void createAccount(final User user) {
        getContentPane().removeAll();
        getContentPane().repaint();
        
        setSize(300, 150);
        setTitle(user.getUsername().substring(0, 1).toUpperCase() + user.getUsername().substring(1, user.getUsername().length()).toLowerCase() + "'s Account");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        
        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        JLabel welcome = new JLabel("Welcome to the Online Bank!");
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipady = 20;
        c.ipadx = 20;
        add(welcome, c);
        
        JLabel enterAmount = new JLabel("Please enter your current balance:  $");
        c.gridx = 0;
        c.gridy = 1;
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.ipadx = 0;
        c.ipady = 0;
        add(enterAmount, c);
        
        final JTextField amount = new JTextField(2);
        c.gridx = 1;
        c.gridy = 1;
        c.anchor = GridBagConstraints.EAST;
        c.fill = GridBagConstraints.HORIZONTAL;
        add(amount, c);
        
        final JLabel point = new JLabel(".");
        c.gridx = 2;
        c.gridy = 1;
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;
        add(point, c);
        
        final JTextField decimal = new JTextField(2); 
        c.gridx = 3;
        c.gridy = 1;
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;
        add(decimal, c);
        
        JButton confirm = new JButton("Ok");
        
        getRootPane().setDefaultButton(confirm);
        
        confirm.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                
                final String total = amount.getText() + "." + decimal.getText();
                System.out.println(total);
                
                fileManager fm = new fileManager();
                DecimalFormat df = new DecimalFormat("00000000.00");    //significant figures? LOL might as well keep it like this
                
                if(decimal.getText().length() > 2) {
                     JOptionPane.showMessageDialog(null, "Number after decimal may not exceed two characters..", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(amount.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Field cannot be left empty.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(!amount.getText().matches("[0-9]+")) {
                    JOptionPane.showMessageDialog(null, "Your balance cannot contain letters.", "Login Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else {
                    BankAccount ba = new BankAccount(user, Double.parseDouble(total));
                    enterAccount(ba);
                    
                    try {
                        fm.addAmountToUser(user, Double.parseDouble(amount.getText()));
                        fm.printFile();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        c.gridx = 0;
        c.gridy = 2;
        c.anchor = GridBagConstraints.CENTER;
        c.fill = GridBagConstraints.NONE + 5;
        c.weighty = 1;
        add(confirm, c);
    }
    
    public void enterAccount(final BankAccount ba) {
        getContentPane().removeAll();
        getContentPane().repaint();
        
        User user = ba.getUser();
        
        setSize(250, 200);
        setTitle(user.getUsername().substring(0, 1).toUpperCase() + user.getUsername().substring(1, user.getUsername().length()).toLowerCase() + "'s Account");
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        
        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        JLabel balanceLabel = new JLabel("Balance  $");
        c.anchor = GridBagConstraints.WEST;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
        add(balanceLabel, c);     
        
        final JTextField balanceF = new JTextField(5);
        balanceF.setText("" + ba.getBalance());
        balanceF.setEditable(false);
        c.gridx = 2;
        c.fill = GridBagConstraints.HORIZONTAL;
        add(balanceF);
        
        JButton depositButton = new JButton("Deposit");
        depositButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                double amount = 0;
                String deposit = JOptionPane.showInputDialog(null, "How much money would you like to deposit?");
                if(!deposit.matches("[0-9]+")) {
                    JOptionPane.showMessageDialog(null, "Your deposit cannot contain letters.", "Deposit Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else amount = Double.parseDouble(deposit);
                
                if(amount < 0) {
                    JOptionPane.showMessageDialog(null, "You cannot deposit a negative number.", "Deposit Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if(amount > 1000) {
                    JOptionPane.showMessageDialog(null, "Your deposit cannot exceed $1000.", "Deposit Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else {
                    ba.deposit(amount);
                    balanceF.setText("" + ba.getBalance());
                    fileManager fm = new fileManager();
                    
                    try {
                        fm.updateBalance(ba, ba.getBalance());
                        for(int clear = 0; clear < 20; clear++) {
                           System.out.println("\b") ;
                        }
                        fm.printFile();
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        c.insets.top = 10;
        c.gridx = 1;
        c.gridy = 1;
        c.anchor = GridBagConstraints.CENTER;
        add(depositButton, c);
        
        JButton withdrawButton = new JButton("Withdraw");
        withdrawButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                double amount = 0;
                String withdrawal = JOptionPane.showInputDialog(null, "How much money would you like to withdraw?");
                if(!withdrawal.matches("[0-9]+")) {
                    JOptionPane.showMessageDialog(null, "Your withdrawal cannot contain letters.", "Withdrawal Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else amount = Double.parseDouble(withdrawal);
                
                if(amount < 0) {
                    JOptionPane.showMessageDialog(null, "You cannot withdraw a negative number.", "Withdrawal Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else if (amount > ba.getBalance()) {
                    JOptionPane.showMessageDialog(null, "Your withdrawal cannot be larger than your balance.", "Withdrawal Error",
                                    JOptionPane.ERROR_MESSAGE);
                }
                else {
                    ba.withdraw(amount);
                    balanceF.setText("" + ba.getBalance());
                    fileManager fm = new fileManager();
                    
                    try {
                        fm.updateBalance(ba, ba.getBalance());
                        for(int clear = 0; clear < 20; clear++) {
                           System.out.println("\b") ;
                        }
                        fm.printFile();
                    } catch (IOException ex) {
                        Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        c.gridy = 2;
        c.anchor = GridBagConstraints.CENTER;
        add(withdrawButton, c);
        
        JButton transferButton = new JButton("Transfer");
        transferButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                for(int clear = 0; clear < 20; clear++) {
                    System.out.println("\b") ;
                }
                final JFrame transfer = new JFrame();
                transfer.setSize(440, 150);
                transfer.setLocationRelativeTo(null);
                transfer.setTitle("-Transfer-");
                transfer.setVisible(true);
                transfer.setLayout(new GridBagLayout());
                GridBagConstraints c = new GridBagConstraints();
                
                fileManager fm = new fileManager();
                
                ArrayList<String> usernames = new ArrayList<>();               
                try {
                    usernames = fm.listUsernames();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                final JLabel chooseUser = new JLabel("Account to transfer money to: ");
                c.gridx = 0;
                c.gridy = 0;
                transfer.add(chooseUser, c);
                
                String[] array = new String[usernames.size()];
                array[0] = "- Choose Account -";
                for(int i = 1; i < array.length; i++) {
                    if(!usernames.get(i).equals(ba.getUser().getUsername())) {
                        array[i] = usernames.get(i);
                    }
                    else i--;
                }
                
                final JComboBox users = new JComboBox(array);
                c.gridx = 1;
                c.gridy = 0;
                transfer.add(users, c);
                
                JLabel chooseAmount = new JLabel("How much money would you like to transfer? $");
                c.insets.top = 4;
                c.gridx = 0;
                c.gridy = 1;
                transfer.add(chooseAmount, c);
                
                final JTextField amountToTransfer = new JTextField(5);
                c.gridx = 1;
                transfer.add(amountToTransfer, c);
                
                JButton confirm = new JButton("Ok");
                confirm.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        String transferee = String.valueOf(users.getSelectedItem());
                        //Double amount = Double.parseDouble(amountToTransfer.getText());
                        if(transferee.equals("- Choose Account -")) {
                            JOptionPane.showMessageDialog(null, "You must select an account.", "Transfer Error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                        else if(amountToTransfer.getText().equals("")) {
                            JOptionPane.showMessageDialog(null, "You must input a transfer amount.", "Transfer Error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                        else if(!amountToTransfer.getText().replace(".", "").matches("[0-9]+")) {
                            JOptionPane.showMessageDialog(null, "Your transfer cannot contain letters.", "Transfer Error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                        final double amount = Double.parseDouble(amountToTransfer.getText());
                        if(amount > ba.getBalance()) {
                            JOptionPane.showMessageDialog(null, "Your transfer cannot be greater than your balance.", "Transfer Error",
                                    JOptionPane.ERROR_MESSAGE);    
                        }
                        else if(amount < 0) {
                            JOptionPane.showMessageDialog(null, "Your transfer cannot be a negative number.", "Transfer Error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                        else {
                            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you would like to complete this transfer?", "Confirm Transfer", JOptionPane.YES_NO_OPTION);                      
                            if(reply == JOptionPane.YES_OPTION) {
                                fileManager fm = new fileManager();
                                
                                try {
                                    fm.transferTo(ba, transferee, amount);
                                } catch (IOException ex) {
                                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                                }
                               
                                balanceF.setText("" + ba.getBalance());
                                
                                System.out.println("TRANSFER COMPLETED");
                                transfer.setVisible(false);
                            }   
                        }
                    }
                });
                c.gridx = 0;
                c.fill = GridBagConstraints.RELATIVE;
                c.gridy = 2;
                c.anchor = GridBagConstraints.CENTER;
                confirm.setVisible(true);
                transfer.add(confirm, c);
                
                JButton cancel = new JButton("Cancel");
                cancel.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        transfer.setVisible(false);
                    }
                });
                c.gridx = 0;
                c.anchor = GridBagConstraints.EAST;
                transfer.add(cancel, c);
            }
        });
        c.gridy = 3;
        add(transferButton, c);
        
        JButton logout = new JButton("Logout");
        logout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int reply = JOptionPane.showConfirmDialog(null, "You are about to log out of the systerm.", "Logout", JOptionPane.YES_NO_OPTION);                      
                if(reply == JOptionPane.YES_OPTION) {
                    getContentPane().removeAll();
                    getContentPane().repaint();
                    run();
                }      
            }
        });
        c.gridy = 4;
        add(logout, c);
        
        setResizable(false);
    }
    
    /**
     * A method that cancels the program and shuts down the GUI
     */
    public void cancel() {
        System.exit(0);
    }
    
    private Object makeObj(final String item)  {
        return new Object() { public String toString() { return item; } };
    }
}
